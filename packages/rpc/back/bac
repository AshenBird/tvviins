import { ensureDirSync, } from 'fs-extra'
import { readJSONSync } from "fs-extra/esm"
import { writeFileSync } from "node:fs"
import { createUnplugin } from 'unplugin'
import { cwd } from 'node:process'
import { join, resolve, parse, relative } from 'node:path'
import { execSync} from 'node:child_process'
function appendApiMap(code: string, id: string) {
  const root = "./node_modules/tvvins-temp"
  const dir = resolve(cwd(), root)
  const mapPath = join(dir, "map.json");
  const genScriptPath = join(resolve(cwd(), root), "gen.ts");
  const importPath = relative(dir, id)
  importPath.replaceAll(`\\`, "/")
  ensureDirSync(dir)
  writeFileSync(genScriptPath, `
    import * as APIList from "${importPath.replaceAll(`\\`, "/")}";
    import { isAPI } from "@tvvins/rpc"
    import { existsSync, ensureFileSync, readJSONSync,writeJSONSync } from 'fs-extra'
    import process from "node:process"
    const result = []
    const mapPath ="${mapPath.replaceAll("\\", "\\\\")}" 
    const map = existsSync(mapPath)?readJSONSync(mapPath):{}
    console.log(map)

    for(const [k, API] of Object.entries(APIList)){
      if(!isAPI(API))continue;
      result.push(k)
    }
    map["${id}"] = result
    writeJSONSync(mapPath,map)
  `);
  execSync(`tsx ${genScriptPath}`, { stdio: "inherit" })
  const map = readJSONSync(mapPath);
  if (map[id].length === 0) {
    return code
  };
  let result = `
    import axios from "axios";
  `
  map[id].forEach((methodName: string) => {
    result += `
      export const ${methodName} = (payload,headers)=>{
        return axios.request({
          method:"POST",
          url:"/${parse(id).name}/${methodName}",
          data:payload
        })
      };
    `
  })
  return result
}
const tvvins = createUnplugin(() => ({
  name: "tvvins",
  enforce: "pre",
  transformInclude: (id: string) => {
    return id.includes("apis")
  },
  transform: async (code, id) => {
    return requireWithoutCache(code, id)
  }
}))